name: "Reserve Stats CI"

on:
  push:
    branches:
      - "github-actions"
  workflow_dispatch:

jobs:
  # prepare the outputs to serve the next phases
  # allow branchs: all
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      current_branch: ${{ steps.current_branch.outputs.value }}
      commit_tag: ${{ steps.commit_tag.outputs.value }}
      config: ${{ steps.config.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch
        shell: bash
        id: current_branch
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "::set-output name=value::$BRANCH"

      - name: Get Git Commit Tag
        shell: bash
        id: commit_tag
        run: |
          COMMIT_HASH="$(echo $GITHUB_SHA | head -c7)"
          echo "::set-output name=value::$COMMIT_HASH"

      - name: Read config file
        id: config
        shell: bash
        run: |
          config=$(cat ./.github/config.json)
          # the following lines are only required for multi line json
          config="${config//'%'/'%25'}"
          config="${config//$'\n'/'%0A'}"
          config="${config//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=value::$config"

  lint:
    needs:
      - prepare
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        dir: ${{ fromJson(needs.prepare.outputs.config).directories }}
    env:
      TARGET_DIR: ${{ matrix.dir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare before run lint check
        if: matrix.dir != 'other'
        run: |
          # copy golangci
          cp .golangci.yml $TARGET_DIR
          # switch to target dir
          cd $TARGET_DIR

      - name: Prepare excludes
        if: matrix.dir == 'other'
        id: exclude
        run: |
          excludes=$(cat <<-END
            ${{ toJSON(fromJSON(needs.prepare.outputs.config).dir) }} 
          END
          )
          # parse JSON to bash array
          excludes=($(echo "$excludes" | jq -r -c '.[]'))
          # remove 'other' from exclude array
          excludes=("${excludes[*]/other}")
          exclude_pattern=$(printf 'github.com/KyberNetwork/reserve-stats/\(%s\)' "$excludes")
          exclude_pattern=" --exclude $exclude_pattern"
          echo "::set-output name=value::$exclude_pattern"

      - name: Golangci-lint
        uses: golangci/golangci-lint-action@v2
        env:
          EXCLUDE: ${{ steps.exclude.outputs.value }}
        with:
          version: v1.28.3
          args: -v --config ./.golangci.yml ${{ env.EXCLUDE }}
